/*
 *  Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

apply from: "$rootDir/gradle/javaProject.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"

description = "Ballerina Custom Record Creator"

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    balTools
}

dependencies {
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    implementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
    implementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
    implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation group: 'org.json', name: 'json', version: '20080701'
    implementation "org.slf4j:slf4j-api:1.7.35"
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.8.1"
    implementation "com.github.spullara.mustache.java:compiler:0.9.10"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    def ballerinaDist = "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

test {
    dependsOn {
        copyStdlibs
    }
    systemProperty "ballerina.home", bDistribution
    useJUnitPlatform()
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}